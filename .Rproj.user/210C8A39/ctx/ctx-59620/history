x <- bfi[, 1:5]
x[, 1] <- -x[, 1] # Reverse-coded item.
alphaci(x)
devtools::load_all(".")
library("alphaci")
library("psychTools")
x <- bfi[, 1:5]
x[, 1] <- -x[, 1] # Reverse-coded item.
alphaci(x)
x
cov(x)
devtools::load_all(".")
devtools::load_all(".")
library("alphaci")
library("psychTools")
x <- bfi[, 1:5]
x[, 1] <- -x[, 1] # Reverse-coded item.
alphaci(x)
devtools::load_all(".")
alphaci(x)
styler:::style_active_file()
styler:::style_active_pkg()
styler:::style_active_pkg()
set.seed(313)
x = simulate_tau(100, k, 1, 3)
devtools::load_all(".")
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
alpha_ci(x, bootstrap = TRUE)
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
alphaci(x, bootstrap = TRUE)
devtools::load_all(".")
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
alphaci(x, bootstrap = TRUE)
devtools::load_all(".")
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
alphaci(x, bootstrap = TRUE)
alphaci(x)
alphaci(x, type = "elliptical")
alphaci(x, type = "elliptical", parallel = TRUE)
alphaci(x, bootstrap = TRUE, transform = "fisher")
alphaci(x, bootstrap = TRUE, transform = "none")
true = alpha(rep(3, k), rep(1, k))
true
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
alphaci(x, bootstrap = TRUE, transform = "fisher")
alphaci(x, bootstrap = TRUE, transform = "none")
true
library("alphaci")
librarr("future.apply")
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
alphaci(x, bootstrap = TRUE, transform = "fisher")
alphaci(x, bootstrap = TRUE, transform = "none")
true
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
boots
hist(boots)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
set.seed(313)
x = simulate_tau(100, k, 1, 3)
true = alpha(rep(3, k), rep(1, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
true
set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
#set.seed(313)
x = simulate_tau(100, k, 3, 1)
true = alpha(rep(1, k), rep(3, k))
transformer = transformer_fisher
boots = studentized_boots(
n_reps = 1000,
x = x,
type = "adf",
parallel = FALSE,
transformer = transformer)
sd = sqrt(avar(x, cov(x), type = "adf", parallel = FALSE))
transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)
true
hist(boots)
alpha(cov(x))
alphaci(x, bootstrap = TRUE, transform = "fisher")
devtools::load_all(".")
alphaci(x, bootstrap = TRUE, transform = "fisher")
transformer
devtools::load_all(".")
alphaci(x, bootstrap = TRUE, transform = "fisher")
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = (\ci) true <= ci[2] & true >= ci[1]
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = alphaci:::simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
alphaci
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = alphaci:::simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = alphaci:::simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library(alphaci)
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = alphaci:::simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library(alphaci)
usethis::use_roxygen_md()
roxygen2md::roxygen2md()
devtools::document()
styler:::style_active_pkg()
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alphaci:::alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
devtools::load_all(".")
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("fisher" = success(ci_fisher), "none" = success(ci_none))
})
results
rowMeans(results)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_none <- alphaci(x, bootstrap = TRUE, transform = "none")
c("cov_fisher" = success(ci_fisher),
"cov_none" = success(ci_none),
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
})
rowMeans(results)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 1000
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
})
library(alphaci)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 1000
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(100, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
})
rowMeans(results)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 1000
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(10, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
})
rowMeans(results)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(10, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
}, future.seed = TRUE)
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
true = alpha(rep(1, k), rep(3, k))
styler:::style_active_file()
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
k <- 5
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(10, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
}, future.seed = TRUE)
stats::quantile
?stats::quantile
library("alphaci")
library("future.apply")
plan(multisession)
set.seed(313)
n_reps = 100
k <- 5
true = alpha(rep(1, k), rep(3, k))
success = \(ci) true <= ci[2] & true >= ci[1]
results = future.apply::future_replicate(n_reps, {
x = simulate_tau(10, k, 3, 1)
ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = "fisher")
ci_fisher <- alphaci(x, transform = "fisher")
ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = "none")
ci_none <- alphaci(x, transform = "none")
c("cov_fisher_boot" = success(ci_fisher_boot),
"cov_none_boot" = success(ci_none_boot),
"cov_fisher_boot" = success(ci_fisher),
"cov_none_boot" = success(ci_none),
"len_fisher_boot" = ci_fisher_boot[2] - ci_fisher_boot[1],
"len_none_boot" = ci_none_boot[2] - ci_none_boot[1],
"len_fisher" = ci_fisher[2] - ci_fisher[1],
"len_none" = ci_none[2] - ci_none[1])
}, future.seed = TRUE)
