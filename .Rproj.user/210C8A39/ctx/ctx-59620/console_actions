{
    "type": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ],
    "data": [
        "\n  [71]  0.0182659584 -0.0098118964 -0.0182597044  0.0999693341  0.0539112928  0.0977071646 -0.1068301125\n  [78]  0.0018384028 -0.1025139876 -0.2186688764  0.0340848738 -0.0161407406  0.0321127739 -0.0830025674\n  [85] -0.1721511275  0.1879046646 -0.1007501803  0.1930568401 -0.0141396827 -0.0892342148  0.0104344748\n  [92]  0.0920864951 -0.1782609911 -0.0421773012 -0.1188109672  0.0126128538 -0.0140335340 -0.0101216034\n  [99] -0.0507735996  0.0468106308  0.0396452984 -0.0041844269 -0.0312048894 -0.0465940016  0.0763601006",
        "\n [106]  0.0209585429 -0.1024161972 -0.1636743505 -0.0817972549 -0.0625168587  0.1477356189  0.0484691026\n [113]  0.0951957719 -0.0385912438  0.0223931798  0.0104647096 -0.2914144262  0.1457094056 -0.0731224658\n [120]  0.3191758709 -0.0598891312 -0.1064716031 -0.2066987603 -0.1015718668  0.0310960479 -0.1084129572\n [127]  0.0453356204  0.0324549278 -0.0436641473  0.2324790038  0.0874061971 -0.1833782417  0.0863232455\n [134]  0.0183459731  0.0386186554  0.0497136092 -0.0709440612  0.0244138200 -0.0805071303 -0.0186687266",
        "\n [141] -0.0031141840  0.0179697103  0.0492227563 -0.1789849759 -0.0845011593  0.0863036119  0.0069334984\n [148] -0.0280918152  0.0097820551  0.0593955876  0.0487341867 -0.0011943574  0.2581222926 -0.0148309294\n [155]  0.1605416287 -0.0890279099 -0.0201455544 -0.0579960331  0.0228607723  0.1022902415 -0.0344778246\n [162]  0.0648485924 -0.0674608155  0.0790422026  0.0551945720  0.0607274901  0.0677895448 -0.1823341660\n [169]  0.1137303233  0.0885138230 -0.0094223826 -0.0444747418  0.0677766043  0.1217496590  0.0400372923",
        "\n [176] -0.0661342409  0.0488695957 -0.0007540164  0.1004351119  0.1235476481 -0.1336868399  0.0628380486\n [183]  0.1354678487 -0.0633718420 -0.1307804953  0.0330636530 -0.0201564124 -0.2184431590 -0.0898007270\n [190]  0.1066745047 -0.1380338627 -0.0630810882 -0.0788635849 -0.0361093861 -0.0067217035  0.0489783586\n [197] -0.0337120434  0.1255142270 -0.0732784302 -0.1844282920  0.0040397520 -0.0574156234  0.0487101073\n [204] -0.0043182645 -0.0935955002  0.0720638017  0.1366544213  0.0912600207  0.0249847965  0.0687039026",
        "\n [211] -0.1610688771 -0.0974272885 -0.0561451476  0.0369348374 -0.1171013359 -0.0589206330  0.0058134637\n [218] -0.0065098805  0.0695079214 -0.1474743178  0.1661323448  0.0565412300  0.1458250959  0.2591197736\n [225] -0.1260993350  0.1306181018  0.2696489658 -0.0001901452  0.0096812898 -0.0439308885 -0.0480346559\n [232] -0.0397227561 -0.1037398094  0.0186858952 -0.0724869874  0.0597537080  0.0172853061  0.0190088862\n [239]  0.0149913250  0.0950789463  0.0108458212 -0.0281069769  0.0516137610  0.0141817718 -0.0850479657",
        "\n [246]  0.0419783255  0.0335382019 -0.2393582983 -0.0782961811  0.2100628186 -0.0567550648  0.0068423104\n [253] -0.0323710618 -0.1858505491 -0.0756218627 -0.0256283472 -0.1300198593  0.0201459973 -0.0492957146\n [260]  0.1698073109  0.0242716043  0.0928451670  0.1618830766 -0.1088328616  0.2023434731  0.1017179562\n [267] -0.1010388799 -0.0783323922  0.2100740649 -0.0723455127 -0.0411424105  0.1166464786 -0.0965089148\n [274]  0.1020232834  0.0296250461  0.1475098917 -0.0494792184  0.1619897895  0.1278867678  0.0931006727",
        "\n [281]  0.2068545774  0.1048137094 -0.1026876711 -0.0558297197  0.0409278686  0.0677447894  0.0677121435\n [288]  0.0083665843 -0.0164021913  0.1489980625  0.3137315260  0.0585677872  0.0186175941  0.0559969466\n [295] -0.0137069714 -0.0586411520  0.1042528711  0.1392525747  0.0549789807 -0.0442837630 -0.0493537156\n [302] -0.1596426708  0.0469878828  0.0924124298 -0.1074616006  0.0536972954 -0.0776974962  0.1798201637\n [309]  0.0157884822 -0.0426036038 -0.0793834063  0.1059572493 -0.1112789787 -0.1262736578  0.0642984685",
        "\n [316]  0.0087487942  0.0378260439 -0.1145993612  0.0896063758 -0.1747442369 -0.0451758277  0.0127903848\n [323]  0.0652262675 -0.0090808983  0.1909193631  0.0430957025  0.0683982184  0.0341102279  0.0253145838\n [330]  0.0445204434 -0.0474330891 -0.0514381481 -0.0963813759  0.0065648502  0.1470979318  0.1026655959\n [337]  0.0451703929 -0.0645933412 -0.0795456569  0.0180582834  0.0089874812 -0.0616913032 -0.1489536159\n [344] -0.0566463331  0.0298863337 -0.0929970711 -0.0774235177 -0.0244368294 -0.2249627400 -0.0893504501",
        "\n [351]  0.1445545108  0.1661088429 -0.0155428369 -0.0089884535 -0.0157794075  0.0388001944  0.0165298854\n [358] -0.0023233360  0.0268831945  0.0600106024 -0.0050882779 -0.0204332801  0.0803127046  0.0167622071\n [365] -0.0850522019  0.2139358844 -0.0424318232  0.0501838294 -0.2344850729 -0.0174920368  0.1096256355\n [372]  0.0995295962 -0.0246026247  0.0281307900 -0.0555875802  0.0830476989 -0.0913369746 -0.0382298695\n [379] -0.0043046117  0.0966088692 -0.0457901718  0.0016411358  0.0055474975 -0.0939108823 -0.0032744372",
        "\n [386] -0.0075152729  0.0689878413 -0.0023808157  0.1113242264  0.0738688062 -0.2860562226  0.1542584015\n [393]  0.0985823089 -0.0267738530 -0.1529336830 -0.0956990044 -0.1008552696  0.0907166877 -0.0825349149\n [400]  0.0559985956 -0.0476754445 -0.1726217527  0.1104935671  0.0792217552  0.1648902311  0.0453215938\n [407] -0.1226449180  0.0822516037  0.1949128902  0.1721503365  0.0673487873 -0.1015715810 -0.1060591119\n [414]  0.0039394341  0.0448263518 -0.0388853697 -0.1951024961  0.0730088425  0.1886433211  0.1098728920",
        "\n [421]  0.1006113827  0.0280884577 -0.0378985601  0.1813107563 -0.0660215150  0.1461901591 -0.1327411403\n [428]  0.0247185898 -0.0996999340 -0.0276551165 -0.0701030642  0.1027226067  0.0219770615  0.1396039273\n [435] -0.1610723912 -0.0085366397 -0.0664200893  0.1571722576 -0.0768856446 -0.1238111094  0.0810988959\n [442] -0.1789733446  0.0520524501 -0.0736606554 -0.0465694004  0.0737408296 -0.0036257831 -0.0246743588\n [449] -0.0091449864  0.0094218289 -0.0121978901 -0.1318213301  0.1764082074  0.0824986906 -0.0312129871",
        "\n [456]  0.0028699644  0.0396280055 -0.0763545536 -0.0399557821  0.1970789212  0.0223698266 -0.0962098862\n [463]  0.0972003550  0.0976656686 -0.0670585902 -0.0323138062  0.1653161090 -0.0392580411 -0.0944383104\n [470]  0.0639180288  0.0466106150 -0.0384518573  0.0374643635 -0.0966111468  0.0230369368  0.0322129457\n [477]  0.1493585720 -0.1146104075  0.0034316014  0.0621194318  0.0738606487 -0.0258531410  0.0551188464\n [484] -0.0053643680  0.0274559218 -0.1372879980 -0.1664800828 -0.0126512093 -0.0038876390  0.1780189890",
        "\n [491]  0.0519004775 -0.0549831282  0.1395584001 -0.1391524654  0.1071442158  0.0820724673 -0.0324877257\n [498] -0.1228093562  0.0171408995 -0.0062449804  0.0428144115  0.0078538180 -0.1224883606 -0.1596955394\n [505] -0.0866915222 -0.0403658388 -0.0016075007 -0.0065975252  0.0104900328  0.1269980934  0.0748281888\n [512]  0.1028379951  0.0395336274  0.0992407484 -0.0446517011 -0.1293499530  0.1423726912  0.0082714317\n [519]  0.0663441429 -0.0924269688  0.0661841478  0.0262883034  0.0423806923  0.0801226505 -0.0323373505",
        "\n [526] -0.1069582344 -0.0896742605  0.0482976234 -0.0273690428  0.0068213963 -0.0484411459 -0.0409317107\n [533] -0.0770583927  0.1660117639  0.1588752720  0.0600173971  0.0807699459  0.0186961417 -0.2048227208\n [540]  0.0577047146  0.0074388283  0.0153801936  0.0593538104 -0.0949571008 -0.0388687864  0.0782030742\n [547]  0.0059625552 -0.1031939680 -0.0458766178 -0.0822674778  0.0905458440  0.1070521188  0.0241162064\n [554] -0.1641088937 -0.0968617558 -0.0471260629  0.0705206397  0.0227697185  0.0904405490  0.0820059303",
        "\n [561]  0.0092003391  0.0569563296  0.0329203132 -0.2223032963  0.0301992491  0.1381397198 -0.0504872273\n [568] -0.0950972603 -0.1520466437 -0.0039436750 -0.0100180661  0.0691106137  0.0883769993  0.0362856879\n [575]  0.0210914648  0.1590947670  0.0702566696 -0.1394456546  0.1264947823  0.0366350170 -0.0297761286\n [582] -0.0298234766 -0.1411447367  0.0936013840  0.0372026859  0.0990462439  0.1462826919  0.0527051169\n [589] -0.2140538414  0.0632567910 -0.0548254488 -0.0853512542  0.0977917916 -0.2148020864  0.0062929717",
        "\n [596] -0.2063968492 -0.1714545105 -0.0006201197  0.1102082727  0.2337646390 -0.0982781437 -0.2360306323\n [603] -0.0552048000  0.0855128040  0.0584014844 -0.0106167217  0.1199247847  0.0515191771  0.0410607558\n [610] -0.0602742285  0.0108740497 -0.2640353795  0.1532064616 -0.1417799954  0.0754761071 -0.1497653441\n [617] -0.0830112058  0.0858907610 -0.0405624321 -0.0396226023  0.0695499050 -0.1195087630  0.0348613743\n [624] -0.0941977223  0.1946842079 -0.1276706724 -0.0462464113  0.0862177692 -0.0324660224  0.0357535047",
        "\n [631] -0.0048360981  0.0003169757  0.0608030489  0.0064657270 -0.2334492769  0.1091157654  0.0041156768\n [638]  0.3069613447 -0.0741923587  0.1481302122 -0.1450852528 -0.0561387045 -0.0349662635 -0.1042825099\n [645] -0.1543488324  0.0166389335 -0.0568853942 -0.0659352914 -0.2879449227 -0.0328397659 -0.0790938463\n [652] -0.0978511817 -0.0676601014 -0.2050502776  0.1027146887  0.0549532661  0.0190687594 -0.0840234328\n [659]  0.0700114764 -0.2126981774 -0.0691591250  0.2203962045  0.1583302823  0.0634112947  0.0528869457",
        "\n [666] -0.0622060466  0.0441170786  0.0593027628  0.0942741522  0.0906713578 -0.0223170376 -0.1179005983\n [673] -0.1283671317  0.0183128520 -0.1665576867 -0.2035407462  0.0339209888 -0.0521052974  0.0535977890\n [680]  0.0769930543 -0.0201424106 -0.0505478288  0.1926158967 -0.0748717358  0.1744191244  0.0918805656\n [687] -0.0956536485 -0.0361711454  0.0629252100 -0.1099029433  0.0587989209 -0.0890113926  0.0091408679\n [694] -0.0637391570 -0.0306062192 -0.0192400534 -0.0678282111 -0.0265947526  0.2516350388  0.0964656188",
        "\n [701] -0.0727933418 -0.0113404795  0.0843217410  0.0911973755 -0.0020043816 -0.1587369011  0.0069174932\n [708]  0.0664389529 -0.0803120004 -0.1016464968  0.0120453596  0.0014410395 -0.0272410602 -0.0373062630\n [715] -0.0844887852  0.0452727197 -0.0859760106 -0.1369012887  0.1079870397 -0.0714685674 -0.1318666256\n [722]  0.0092729055  0.0318971725  0.0744667153  0.1068158298 -0.0097400138 -0.0518175343 -0.0357245327\n [729]  0.1634327047  0.0627072321 -0.0634029606  0.1925763130  0.0803667338  0.0199277087  0.0929289398",
        "\n [736]  0.0905787008 -0.0044887005  0.0271061070  0.1342097420 -0.0031231833  0.0474960150 -0.2737921743\n [743]  0.0882774525 -0.0080031559 -0.0161116358  0.0598029270  0.1010372063  0.0116053105  0.0719567378\n [750]  0.1337203485 -0.1571952873 -0.1117633787 -0.0085769061 -0.0914241872 -0.0361937226  0.1150179167\n [757] -0.0672736704  0.0442465873  0.1492308638 -0.0539939687 -0.1597522111 -0.0557155893 -0.1067837265\n [764] -0.1773508980 -0.0764230493 -0.1821024488  0.0552056282  0.0147284687 -0.0068865970 -0.1097360982",
        "\n [771]  0.0380868311 -0.1226561321 -0.0423938561 -0.0786795952 -0.0418607985 -0.1309263752 -0.0740202803\n [778]  0.1022351491  0.0523984196 -0.0173877067  0.0296136098  0.0574810356  0.1699794482  0.0379111373\n [785] -0.1791335645 -0.0705078376 -0.0528201216 -0.0401793279  0.2095913007  0.1127560166 -0.0671398052\n [792] -0.1161254263 -0.0937469472 -0.0361390622 -0.0023239521  0.0929409683  0.1309779908  0.0685415955\n [799]  0.1380801079 -0.0877007226  0.0812070074 -0.1971649101 -0.1359348539 -0.0740301771 -0.0081854914",
        "\n [806]  0.2202520125 -0.0482842220 -0.1251172108  0.1067751659 -0.3131836717 -0.0159790262 -0.0541783417\n [813] -0.1529740788 -0.1654750535  0.0024332309 -0.1426505821 -0.0574182047 -0.0318270168 -0.1554544532\n [820] -0.0130674732  0.0475005806 -0.0510844212 -0.0667277107 -0.0819379729  0.1720424667 -0.0489780700\n [827] -0.0116686353  0.0055246360  0.0602138922 -0.1106082130  0.0306679801  0.1730053811 -0.1314018319\n [834] -0.1504632170  0.1314707336 -0.0201374393  0.0554946253 -0.0084975961 -0.0050533002  0.0057612917",
        "\n [841]  0.0778179933 -0.0235630480  0.0129220141  0.1824902650  0.1703230476  0.0139036419  0.0458829547\n [848]  0.0254905012  0.0121957117  0.0632166434 -0.0961018437  0.0176748248  0.1016110958  0.0761420814\n [855] -0.0087954639  0.0421368514 -0.0256029061  0.0605256477 -0.1714842945 -0.0351593953 -0.0366565310\n [862]  0.0271440864 -0.0904260958  0.0080821158  0.0944931587  0.1181275117 -0.0616358695 -0.0157752769\n [869] -0.0180936062  0.2391012468  0.0908022559  0.0952541686  0.1081093218  0.1639686564  0.0585738284",
        "\n [876]  0.0388484301 -0.0555314452 -0.0048620685  0.1160311785  0.0061185216 -0.0730332923 -0.0270338682\n [883] -0.0082625821 -0.0007727502  0.1509195295  0.2170092698 -0.0204621590 -0.0856891633 -0.0112242792\n [890]  0.1585838880 -0.0872127148 -0.2581900856  0.1416450515  0.0472852259  0.1267871606  0.2112425525\n [897] -0.0427358163 -0.1625547017 -0.0651695219 -0.1311435347 -0.0054879104  0.1665661722  0.0706632205\n [904] -0.0332638765  0.0558778364 -0.0887249486  0.2407933916  0.1329080591 -0.1132070867 -0.0705548966",
        "\n [911] -0.1113122268 -0.0664146788 -0.1529967355  0.1506170321  0.0564235242 -0.0210837844 -0.0548930482\n [918] -0.0707556288 -0.0234479504  0.0775181593  0.2731443682 -0.0262949240 -0.1172827966  0.0749377914\n [925]  0.0021321515  0.0028598710 -0.0386601668 -0.0365679475  0.0490732015 -0.0277894860  0.1249367519\n [932]  0.0912723357  0.0032216822  0.0102860938 -0.1053621143  0.0186350060 -0.0758494166  0.0861494687\n [939] -0.0493192562 -0.2038472889 -0.0983405008  0.1328844998 -0.1017558740 -0.0138929834 -0.0866454310",
        "\n [946]  0.0686124292  0.0539586228  0.1030402906 -0.0207007426 -0.2799908509 -0.0385024404 -0.0257048175\n [953] -0.0998231043 -0.0136340675  0.0138396466  0.3283475588 -0.0182002090  0.1163453463  0.0155791808\n [960]  0.1209862334  0.0502432513 -0.0453214872 -0.0514653279 -0.0835697125  0.0393611425  0.0560531533\n [967] -0.2335703512  0.1041124020 -0.0469351708  0.0168116333 -0.0810385937 -0.0139664341  0.0865963632\n [974]  0.0641633917 -0.1009399844  0.1446760465  0.1352455653 -0.0376004440  0.0776062943  0.1157225174",
        "\n [981] -0.0071633987  0.0623836586 -0.0850444922 -0.1170604382 -0.0349365801  0.0939992049 -0.0138107932\n [988] -0.0827469148 -0.1289450329 -0.0625193241  0.0517590493 -0.0644488108  0.1510575191 -0.1827077083\n [995]  0.0559656970  0.0929009996  0.0726975522  0.0875347425 -0.0208026994 -0.0332636632\n",
        "> ",
        "hist(boots)",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7496727 0.7551796 \n",
        "> ",
        "set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 1, 3)",
        "> ",
        "true = alpha(rep(3, k), rep(1, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.2033327 0.5514445 \n",
        "> ",
        "set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 1, 3)",
        "> ",
        "true = alpha(rep(3, k), rep(1, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.2033327 0.5514445 \n",
        "> ",
        "true",
        "[1] 0.3571429\n",
        "> ",
        "set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7496685 0.7553068 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7491856 0.7552141 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7480808 0.7545612 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7463291 0.7540960 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7492334 0.7557426 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7501114 0.7546226 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "x = simulate_tau(100, k, 3, 1)",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "transformer = transformer_fisher",
        "> ",
        "boots = studentized_boots(",
        "+ ",
        "  n_reps = 1000,",
        "+ ",
        "  x = x,",
        "+ ",
        "  type = \"adf\",",
        "+ ",
        "  parallel = FALSE,",
        "+ ",
        "  transformer = transformer)",
        "> ",
        "",
        "> ",
        "sd = sqrt(avar(x, cov(x), type = \"adf\", parallel = FALSE))",
        "> ",
        "transformer$inv(alpha(cov(x)) + quantile(boots, c(0.025, 0.975)) * sd)",
        "     2.5%     97.5% \n0.7518105 0.7564461 \n",
        "> ",
        "true",
        "[1] 0.9782609\n",
        "> ",
        "hist(boots)",
        "> ",
        "alpha(cov(x))",
        "[1] 0.982211\n",
        "> ",
        "alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "     2.5%     97.5% \n0.7515392 0.7565236 \nattr(,\"conf.level\")\n[1] 0.95\nattr(,\"alternative\")\n[1] \"two.sided\"\nattr(,\"type\")\n[1] \"adf\"\nattr(,\"parallel\")\n[1] FALSE\nattr(,\"transform\")\n[1] \"fisher\"\nattr(,\"bootstrap\")\n[1] TRUE\nattr(,\"n_reps\")\n[1] 1000\nattr(,\"est\")\n[1] 0.982211\nattr(,\"sd\")\n[1] 0.02727714\n",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Loading \u001B[34malphaci\u001B[38;5;232m\u001B[39m\n",
        "> ",
        "alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "Error in ci_boot(x, est, sd, type, transformer, parallel, quants, n_reps) : \n  object 'sd_t' not found\n",
        "> ",
        "transformer",
        "$est\n\\(est) atanh(est)\n<environment: namespace:alphaci>\n\n$sd\n\\(est, sd) sd / (1 - est^2)\n<environment: namespace:alphaci>\n\n$inv\nfunction (x)  .Primitive(\"tanh\")\n\n",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Loading \u001B[34malphaci\u001B[38;5;232m\u001B[39m\n",
        "> ",
        "alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "     2.5%     97.5% \n0.9753331 0.9869098 \nattr(,\"conf.level\")\n[1] 0.95\nattr(,\"alternative\")\n[1] \"two.sided\"\nattr(,\"type\")\n[1] \"adf\"\nattr(,\"parallel\")\n[1] FALSE\nattr(,\"transform\")\n[1] \"fisher\"\nattr(,\"bootstrap\")\n[1] TRUE\nattr(,\"n_reps\")\n[1] 1000\nattr(,\"est\")\n[1] 0.982211\nattr(,\"sd\")\n[1] 0.02727714\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = (\\ci) true <= ci[2] & true >= ci[1]",
        "Error: unexpected symbol in \"success = (\\ci\"\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in simulate_tau(100, k, 3, 1) : \n  could not find function \"simulate_tau\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "Error in alpha(rep(1, k), rep(3, k)) : could not find function \"alpha\"\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in simulate_tau(100, k, 3, 1) : \n  could not find function \"simulate_tau\"\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = alphaci:::simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "> ",
        "alphaci",
        "Error: object 'alphaci' not found\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = alphaci:::simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = alphaci:::simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = alphaci:::simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "usethis::use_roxygen_md()",
        "\u001B[32m✔\u001B[39m Setting active project to \u001B[34m'C:/Users/jonas/OneDrive/Github/alphaci'\u001B[39m\n\u001B[32mv\u001B[39m Setting \u001B[32mRoxygen\u001B[39m field in DESCRIPTION to \u001B[34m'list(markdown = TRUE)'\u001B[39m\n\u001B[34mi\u001B[39m The package `roxygen2md` is required.\n\u001B[31mx\u001B[39m Would you like to install it?\n\n1: Yes\n2: No\n\n",
        "Selection: ",
        "1",
        "Installing package into 'C:/Users/jonas/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n",
        "also installing the dependency 'enc'\n\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/4.2/enc_0.2.2.zip'\n",
        "Content type 'application/zip'",
        " length 58376 bytes (57 KB)\n",
        "downloaded 57 KB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/4.2/roxygen2md_1.0.0.zip'\n",
        "Content type 'application/zip'",
        " length 54885 bytes (53 KB)\n",
        "downloaded 53 KB\n\n",
        "package 'enc' successfully unpacked and MD5 sums checked\npackage 'roxygen2md' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\jonas\\AppData\\Local\\Temp\\RtmpYxI6O7\\downloaded_packages\n\u001B[31m*\u001B[39m Run \u001B[90m`roxygen2md::roxygen2md()`\u001B[39m to convert existing Rd comments to markdown\n\u001B[31m*\u001B[39m Consider using Git for greater visibility into and control over the conversion process\n\u001B[31m*\u001B[39m Run \u001B[90m`devtools::document()`\u001B[39m when you're done\n",
        "> ",
        "roxygen2md::roxygen2md()",
        "No files changed.\n",
        "\u001B[32mv\u001B[39m \u001B[34m0\u001B[39m source files changed\n\u001B[33mi\u001B[39m Running \u001B[90m`devtools::document()`\u001B[39m\n\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Updating \u001B[34malphaci\u001B[38;5;232m documentation\u001B[39m\n\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Loading \u001B[34malphaci\u001B[38;5;232m\u001B[39m\n\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('ci')\u0007\u001B[34mci.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('studentized_boots')\u0007\u001B[34mstudentized_boots.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('reliability')\u0007\u001B[34mreliability.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n",
        "\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('simulate_tau')\u0007\u001B[34msimulate_tau.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('avar')\u0007\u001B[34mavar.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n\u001B[38;5;232mWriting \u001B]8;;ide:run:pkgload::dev_help('var_ell')\u0007\u001B[34mvar_ell.Rd\u001B[38;5;232m\u001B]8;;\u0007\u001B[39m\n\u001B[31m*\u001B[39m Review the changes carefully\n\u001B[31m*\u001B[39m Commit the changes to version control\n",
        "> ",
        "devtools::document()",
        "\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Updating \u001B[34malphaci\u001B[38;5;232m documentation\u001B[39m\n\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Loading \u001B[34malphaci\u001B[38;5;232m\u001B[39m\n",
        "> ",
        "styler:::style_active_pkg()",
        "Using style transformers `styler::tidyverse_style()`\nStyling  9  files:\n R/alphaci.R                    v \n R/ci.R                         v \n R/helpers.R                    v \n R/reliabilities.R              v \n R/simulations.R                v \n R/transformers.R               v \n R/variance.R                   v \n tests/testthat.R               v \n tests/testthat/test-variance.R v \n----------------------------------------\nStatus\tCount\tLegend \nv \t9\tFile unchanged.\ni \t0\tFile changed.\nx \t0\tStyling threw an error.",
        "\n----------------------------------------\n\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alphaci:::alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;232m\u001B[36mi\u001B[38;5;232m Loading \u001B[34malphaci\u001B[38;5;232m\u001B[39m\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "Error in alphaci(x, bootstrap = TRUE, transform = \"fisher\") : \n  could not find function \"alphaci\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "Error in alpha(rep(1, k), rep(3, k)) : could not find function \"alpha\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"fisher\" = success(ci_fisher), \"none\" = success(ci_none))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "results",
        "             [,1]  [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16]\nfisher.97.5% TRUE  TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nnone.97.5%   TRUE FALSE TRUE TRUE TRUE TRUE FALSE TRUE TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n             [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31]\nfisher.97.5%  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\nnone.97.5%  ",
        "  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n             [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46]\nfisher.97.5%  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nnone.97.5%    TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n             [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61]\nfisher.97.5%",
        "  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\nnone.97.5%    TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n             [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76]\nfisher.97.5%  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nnone.97.5%    TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n            ",
        " [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91]\nfisher.97.5%  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nnone.97.5%    TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n             [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]\nfisher.97.5%  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE   TRUE\nnone.97.5%    TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE   TRUE\n",
        "> ",
        "rowMeans(results)",
        "fisher.97.5%   none.97.5% \n        0.97         0.96 \n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_none <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none\" = success(ci_none),",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "rowMeans(results)",
        "cov_fisher.97.5%   cov_none.97.5% len_fisher.97.5%   len_none.97.5% \n      0.97000000       0.96000000       0.01465795       0.01431668 \n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 1000",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "})",
        "Error in ci_asymptotic(est, sd, nrow(x), transformer, quants) : \n  object 'sd_t' not found\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 1000",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(100, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "rowMeans(results)",
        "cov_fisher_boot.97.5%   cov_none_boot.97.5%       cov_fisher_boot         cov_none_boot \n           0.93900000            0.94300000            0.93200000            0.93900000 \nlen_fisher_boot.97.5%   len_none_boot.97.5%            len_fisher              len_none \n           0.01480869            0.01439236            0.01399308            0.01377798 \n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 1000",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(10, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "})",
        "Error in quantile.default(boots, quants) : \n  missing values and NaN's not allowed if 'na.rm' is FALSE\n",
        "> ",
        "rowMeans(results)",
        "cov_fisher_boot.97.5%   cov_none_boot.97.5%       cov_fisher_boot         cov_none_boot \n           0.93900000            0.94300000            0.93200000            0.93900000 \nlen_fisher_boot.97.5%   len_none_boot.97.5%            len_fisher              len_none \n           0.01480869            0.01439236            0.01399308            0.01377798 \n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(10, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "}, future.seed = TRUE)",
        "Error in quantile.default(boots, quants) : \n  missing values and NaN's not allowed if 'na.rm' is FALSE\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "Error in diag(sigma^2) : object 'k' not found\n",
        "> ",
        "styler:::style_active_file()",
        "Using style transformers `styler::tidyverse_style()`\n\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;232m`styler:::style_active_file()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m Can only style .R, .Rmd and .Rnw files.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_error()\u0007rlang::last_error()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "k <- 5",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(10, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "}, future.seed = TRUE)",
        "Error in quantile.default(boots, quants) : \n  missing values and NaN's not allowed if 'na.rm' is FALSE\n",
        "> ",
        "stats::quantile",
        "function (x, ...) \nUseMethod(\"quantile\")\n<bytecode: 0x000001d1b82e7368>\n<environment: namespace:stats>\n",
        "> ",
        "?stats::quantile",
        "> ",
        "library(\"alphaci\")",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "set.seed(313)",
        "> ",
        "n_reps = 100",
        "> ",
        "k <- 5",
        "> ",
        "true = alpha(rep(1, k), rep(3, k))",
        "> ",
        "success = \\(ci) true <= ci[2] & true >= ci[1]",
        "> ",
        "results = future.apply::future_replicate(n_reps, {",
        "+ ",
        "  x = simulate_tau(10, k, 3, 1)",
        "+ ",
        "  ci_fisher_boot <- alphaci(x, bootstrap = TRUE, transform = \"fisher\")",
        "+ ",
        "  ci_fisher <- alphaci(x, transform = \"fisher\")",
        "+ ",
        "  ci_none_boot <- alphaci(x, bootstrap = TRUE, transform = \"none\")  ",
        "+ ",
        "  ci_none <- alphaci(x, transform = \"none\")  ",
        "+ ",
        "  c(\"cov_fisher_boot\" = success(ci_fisher_boot), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none_boot),",
        "+ ",
        "    \"cov_fisher_boot\" = success(ci_fisher), ",
        "+ ",
        "    \"cov_none_boot\" = success(ci_none),",
        "+ ",
        "    \"len_fisher_boot\" = ci_fisher_boot[2] - ci_fisher_boot[1],",
        "+ ",
        "    \"len_none_boot\" = ci_none_boot[2] - ci_none_boot[1],",
        "+ ",
        "    \"len_fisher\" = ci_fisher[2] - ci_fisher[1],",
        "+ ",
        "    \"len_none\" = ci_none[2] - ci_none[1])",
        "+ ",
        "}, future.seed = TRUE)",
        "Error in quantile.default(boots, quants) : \n  missing values and NaN's not allowed if 'na.rm' is FALSE\n",
        "\nRestarting R session...\n\n"
    ]
}