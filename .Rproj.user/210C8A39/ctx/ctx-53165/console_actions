{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 8.051733\n",
        "> ",
        "var(results) * n",
        "[1] 4.478699\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(0.5, k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 0.4587576\n",
        "> ",
        "var(results) * n",
        "[1] 0.435944\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(0.5, k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 29.05183\n",
        "> ",
        "var(results) * n",
        "[1] 11.83098\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 0.00167769\n",
        "> ",
        "var(results) * n",
        "[1] 0.001694577\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 1.190659\n",
        "> ",
        "var(results) * n",
        "[1] 1.206566\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 1.293465\n",
        "> ",
        "var(results) * n",
        "[1] 1.308198\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 0.02150369\n",
        "> ",
        "var(results) * n",
        "[1] 0.02204954\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- MASS::mvrnorm(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- MASS::mvrnorm(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 0.0002725299\n",
        "> ",
        "var(results) * n",
        "[1] 0.0002736321\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = TRUE)",
        "[1] 0.08409252\n",
        "> ",
        "var(results) * n",
        "[1] 0.1717151\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"elliptic\", parallel = TRUE)",
        "[1] 2.686248\n",
        "> ",
        "var(results) * n",
        "[1] 2.657541\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"elliptic\", parallel = TRUE)",
        "[1] 0.238941\n",
        "> ",
        "var(results) * n",
        "[1] 0.2459252\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"elliptic\", parallel = FALSE)",
        "[1] 0.178475\n",
        "> ",
        "var(results) * n",
        "[1] 0.1774314\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = FALSE)",
        "[1] 0.01479699\n",
        "> ",
        "var(results) * n",
        "[1] 0.02951507\n",
        "> ",
        "styler:::style_active_pkg()",
        "Using style transformers `styler::tidyverse_style()`\nStyling  10  files:\n R/alphaci-package.R            i \n R/ci.R                         i \n R/helpers.R                    v \n R/inference.R                  i \n R/reliabilities.R              v \n R/simulations.R                v \n R/transformers.R               v \n R/variance.R                   i \n tests/testthat.R               v \n tests/testthat/test-variance.R i \n----------------------------------------\nStatus\tCount\tLegend \nv \t5\tFile unchanged.\ni \t5\tFile changed.",
        "\nx \t0\tStyling threw an error.\n----------------------------------------\nPlease review the changes carefully!\n",
        "> ",
        "alphaci_std(x)",
        "Call: alphaci_std(x = x)\n\n95% confidence interval (n = 50000).\n    0.025     0.975 \n0.9214773 0.9246535 \n\nSample estimates.\n    alpha        sd \n0.9230654 0.1811767 \n",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = FALSE)",
        "[1] 0.01479699\n",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "> ",
        "x <- LaplacesDemon::rmvl(500, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;255m\u001B[36mi\u001B[38;5;255m Loading \u001B[34malphaci\u001B[38;5;255m\u001B[39m\n",
        "> ",
        "x <- LaplacesDemon::rmvl(500, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "> ",
        "x",
        "               [,1]         [,2]         [,3]         [,4]          [,5]\n  [1,] -0.155250300 -0.441097478  0.333992528 -0.642149449 -6.822695e-01\n  [2,]  0.056252818  0.831583689  0.213702986 -0.170242066  1.034060e-01\n  [3,]  1.243030996  0.774422794  0.723355592  0.266871450  2.449757e-01\n  [4,]  0.214811643  0.212010119 -0.118806403  0.128796570  2.812753e-01\n  [5,] -3.175547878 -1.518046780 -1.014885253 -1.244651199 -6.955810e-01\n  [6,]  0.068740951  0.136035758 -0.112628539  0.144161156  3.192770e-01\n  [7,]",
        "  0.386699807  0.275491331  0.107924563  0.278351888 -3.175166e-02\n  [8,]  2.087631276  0.643401267  1.512544760  1.331003735  2.319466e+00\n  [9,]  1.284985196 -0.827827704 -0.371595150  1.018042734 -8.646320e-01\n [10,]  0.705958778  0.482300453  1.132171766  0.301393265  4.781813e-02\n [11,]  3.171351949  2.529148491  3.285088987  2.798389811  1.845564e+00\n [12,]  1.772110757  1.019661988  1.595427793  1.493591892  2.758322e+00\n [13,] -0.305927495 -0.134824921 -0.328768390 -0.848376507 -2.833993e-02\n [14,] -0.286150353",
        " -0.193821423  0.135194081 -0.403316220 -1.338862e-01\n [15,]  0.991159696  1.452275140  0.351986484  0.680006474  9.367481e-01\n [16,]  0.070562996 -0.220306305 -0.169430916 -0.354395473 -1.090077e-01\n [17,] -0.009053128  0.386404221  0.055185266  0.276257146  3.081926e-01\n [18,]  0.380148306 -1.906745477  1.354452874  0.238443366  2.109882e-01\n [19,] -0.213309136 -0.201081576  0.174217247 -0.030098615 -9.918462e-02\n [20,] -1.204239188 -0.397714007 -0.055313306 -0.189466175 -7.144211e-01\n [21,] -0.730107059 -0.402726010",
        " -0.432123437 -0.736557326 -3.720452e-01\n [22,]  0.605832239  0.226678076  0.295437949  0.804697855  7.273155e-01\n [23,] -0.049146109  0.013464887 -0.026818231 -0.036164578  2.011460e-02\n [24,] -0.257910563  0.195057514  0.033329987 -0.286087707  1.152789e+00\n [25,] -2.209913084  1.214007703  2.036574597  0.754400466  4.188171e-02\n [26,]  0.020004774  0.358699892  0.204902965  0.346053889  2.015623e-01\n [27,] -0.056252196  0.552010808  0.806161736  0.520754974 -6.360554e-01\n [28,]  0.130665270  2.298026654  1.329054176",
        "  0.901861365  2.584773e+00\n [29,]  0.842838427  0.850845585  0.664221702  0.630144260  1.128085e+00\n [30,] -1.442410091  0.550194231  0.056974393  0.685100529 -2.939824e-01\n [31,]  0.669831663  0.682475350  1.069456564  0.468469259  1.103770e+00\n [32,]  0.104961721  0.286262702  0.576069676  0.560541245  3.532595e-01\n [33,]  0.265621042  0.088594900  0.157198474 -0.077365170 -1.424265e-01\n [34,] -0.979804420 -0.556768456 -0.765894178 -0.922733689 -1.200203e+00\n [35,]  0.167471534  0.634628336 -0.003098392  0.465746007",
        " -5.737061e-01\n [36,]  0.174806077  0.073934275 -0.163234966 -0.054926130 -7.314495e-02\n [37,]  0.161045265  0.125150992  0.088085093 -0.057816264  5.336940e-01\n [38,]  0.505549571 -0.139192497 -0.141421690 -0.145836957  2.568681e-01\n [39,]  0.283260489  0.214687559 -0.642949680 -0.580551100  1.141426e+00\n [40,] -0.325924874 -0.406033685 -0.283118993 -0.235633700 -3.619972e-01\n [41,] -2.412380380 -0.358800719 -2.721518255 -1.076583028 -7.256688e-01\n [42,] -0.425783138 -0.819890171 -0.223371046 -0.656498598 -6.632653e-01",
        "\n [43,] -0.333363319  0.387891652  0.381636986  0.196329777  1.105039e-01\n [44,] -1.379192103  0.217237385 -0.909241904 -0.440723212 -1.379283e+00\n [45,]  1.035025439  0.400210419  0.626742306  0.118250874  1.191756e+00\n [46,] -0.949241020 -0.514836592 -1.580148432  0.173609635  1.179334e+00\n [47,]  1.047409541  0.989406231 -0.215568554 -0.015520770  1.503011e-01\n [48,] -1.405088349 -3.264398689 -1.237713414 -3.446939238 -5.385693e-01\n [49,] -0.592084635 -1.151736415 -1.368811238 -2.214931270 -1.190618e+00\n [50,]",
        " -0.323197920  0.116676072 -0.238156058  0.008688217 -1.898808e-01\n [51,]  0.612355046  0.579180637  0.274241055  0.334606556  3.662148e-01\n [52,]  0.883193751  2.295098016  2.792088367  0.805325578  1.126797e+00\n [53,]  1.943609852  1.477417040  1.012990788  2.087287883  9.853189e-01\n [54,] -1.147082093  0.311369936 -0.116999023 -0.402276070 -4.825009e-01\n [55,]  0.091302568  0.148594291  0.340210632  0.442297451  1.291111e+00\n [56,]  0.070862429 -0.196849547  0.172518237  0.078983454  6.647538e-05\n [57,] -0.434606320",
        " -0.131707076 -0.295003191 -0.414262850 -2.735400e-01\n [58,] -0.097281778 -0.576431663 -0.557170163 -0.195878662  1.351055e-02\n [59,] -0.191555042  0.574279643  1.127847533 -0.616562869  3.629680e-01\n [60,]  2.778660620  2.469774337  1.316767510  2.319501800  1.608255e+00\n [61,] -0.191013553 -0.068315008 -0.227828699  0.268946495 -1.734829e-01\n [62,]  0.849944975  0.906866365  1.149725888  1.228543149  1.453609e+00\n [63,] -0.142298975 -0.132749968 -0.288332274 -0.095662402 -9.498151e-02\n [64,]  0.241603373  0.218161614",
        "  0.334640224 -0.151540409  1.040987e-02\n [65,]  1.103820523 -0.867371776 -0.028422542 -0.248989816 -1.313971e+00\n [66,]  0.449368635  0.962200696  0.566229724 -0.743895400  4.495849e-01\n [67,]  0.164076678  0.170815122  0.013632106  0.161420300 -5.610112e-02\n [68,]  0.171440699  0.736336559  0.640294603  0.224232484  1.597962e+00\n [69,]  0.011567558 -0.281006812  0.123488624 -0.259297529 -2.218028e-01\n [70,]  0.448436676  0.937858852  0.540954627  0.326708579  2.719377e-01\n [71,] -0.056917028  0.180589437 -0.090851451",
        " -0.038590793  3.318442e-02\n [72,] -0.393029567 -0.599032078 -1.030784631 -0.611540821 -9.817753e-01\n [73,] -1.609852743 -0.397404724 -1.604570124 -0.883293238 -4.773115e-01\n [74,]  0.209135408  0.016410375 -0.029789207  0.341310481  1.129186e+00\n [75,] -1.072636051 -0.341831113  0.356593507  0.164316970 -2.084729e-01\n [76,] -0.219598644 -0.272905363 -0.751802215 -0.524833453 -8.170975e-03\n [77,]  0.050369269  0.585491398  0.485938311  0.959142879  1.417739e-01\n [78,]  1.023861619  0.638403365 -0.238166783  0.400740532",
        "  7.779229e-01\n [79,]  0.627571377  0.645219766  0.240835252  0.197273669  6.778239e-01\n [80,] -0.223847384 -0.651177257  0.280249783 -0.662770829 -2.200085e-01\n [81,] -0.612667369 -0.319711806 -0.166940992 -0.323598852 -3.716857e-01\n [82,]  1.005866650  0.836555352  0.018508888  0.002353143  4.631280e-01\n [83,] -0.326275433  0.084895910  1.646913924 -1.102634867 -5.036377e-01\n [84,] -0.364384915  0.196584826  0.657716721  0.880430403  7.541476e-01\n [85,]  1.611068964  2.185859199  2.005108048  1.545009234  4.143684e-01",
        "\n [86,]  0.760188009 -0.122800619  0.015824048  0.038929263  3.761586e-01\n [87,]  0.818355846  1.120734380  1.212622823  1.194557876  1.232383e+00\n [88,] -0.650517401 -0.014957771 -0.785582953 -0.469079598  1.221248e-01\n [89,]  1.964035153  1.270768725  0.079243712  0.492684183  2.571539e-01\n [90,] -0.850153905  0.530990882  1.205995583  0.057262565  1.062033e-01\n [91,] -0.444002916 -1.775827736 -0.950525164  1.081646041  5.993135e-01\n [92,]  1.186068808  0.082486577  0.998710473 -0.120751496  3.110901e-01\n [93,]",
        " -0.191747111  0.054897588  0.519271157 -0.670341674 -3.601871e-02\n [94,] -0.331641313 -0.154092853 -0.770207617  0.233068766 -1.110805e-01\n [95,] -0.081260397 -0.116259615  0.133339426 -0.154126786  7.146202e-01\n [96,]  0.663962883 -0.691524596 -0.081035108  1.530701522  2.832565e+00\n [97,] -1.401547933  0.263242180 -0.432787568 -0.317966374 -2.735172e-01\n [98,] -1.307833064 -0.947676964 -1.008722185 -1.067034798 -1.060679e+00\n [99,]  3.193404726  4.254314925  2.641655795  3.412105947  4.404157e+00\n[100,]  0.374500713",
        "  0.053952521 -0.135414735  0.203871738 -1.756356e-01\n[101,] -0.407993505 -0.704874925 -0.451640549 -0.904653438 -8.095718e-01\n[102,] -0.450587688 -0.036248193  0.106805366  0.189935877 -1.074007e+00\n[103,] -0.206951878 -0.382049614 -0.315464759  0.090791349 -5.518100e-01\n[104,]  1.696324171  0.785062019 -0.226561265  0.187426461  5.347552e-01\n[105,] -1.633598853 -0.596959491 -0.620302087 -1.065193377 -1.803821e+00\n[106,] -0.295753593  0.119274606 -0.086537909 -0.056737188 -6.888530e-01\n[107,]  0.620164840  1.571623709",
        "  1.207745573  1.164218772  9.244478e-01\n[108,]  0.110897273 -1.473731013  0.762817602 -1.163856034 -2.899574e-01\n[109,] -0.631737261 -1.695103916 -3.489574259 -0.434880249 -1.699202e+00\n[110,]  1.100136229  0.636933877  0.976011485  0.326566335  6.544938e-01\n[111,]  1.104174665  1.391282455 -0.211863583  0.373697075 -2.128302e-01\n[112,]  0.211741136 -0.721567414 -0.022242632  1.097321101 -3.965927e-01\n[113,] -0.077279182 -0.660959355  0.599286862 -0.049535648  3.523268e-01\n[114,]  0.079146498 -0.175976058 -0.082807930",
        " -0.126896636 -3.076517e-01\n[115,] -2.012652300 -0.167894041  0.037150588 -0.423312566 -6.699994e-01\n[116,] -0.021715465 -0.018884518  0.189279063 -0.001092582  3.823462e-02\n[117,] -0.247989352 -0.194730770 -1.436058002 -0.009141482 -2.440115e-01\n[118,] -0.078300344  1.008707063 -0.729936470 -0.014860240 -1.612204e-01\n[119,]  0.350047742  0.223520988 -0.114890051  0.651708142  5.170138e-02\n[120,]  0.048831896 -0.011045574  0.074106952 -0.006304156  5.835621e-02\n[121,]  0.724948496  0.394799931  0.510959394  0.568804620",
        "  4.243221e-01\n[122,] -0.156716141 -0.208778417 -0.298203191  0.070145699  4.558417e-01\n[123,]  1.218823102  0.268404118  0.440663957  0.898621314  1.304878e+00\n[124,]  0.410739978 -0.656344670 -0.588922427  0.583747559 -6.272813e-01\n[125,]  0.193080114  0.514332519  0.258760954  0.478656925  2.884131e-01\n[126,]  2.162761870  3.418959002  2.529597988  2.111738355  3.028540e+00\n[127,]  0.721437590  0.502967139  0.154693031 -0.245220261 -3.025619e-01\n[128,]  1.749429524  0.383360649  0.701503330  0.682766206  5.471666e-01",
        "\n[129,]  0.439996985 -0.892198109 -0.157694906  0.051029434 -9.124482e-01\n[130,]  0.954678920  1.119694089  0.854933720  1.142426540  9.564422e-01\n[131,] -0.049939486  0.106613403  0.639875799  0.514429770  1.792494e-01\n[132,]  0.159276704  0.330915686  0.114211790 -0.147998694 -7.326762e-02\n[133,]  0.274525702 -0.217783414 -0.292774359 -0.178826057 -5.168568e-01\n[134,]  0.087753045  0.905846363 -1.436010476 -1.533679011 -1.081749e-01\n[135,]  2.335906852  2.473266940  1.140083913  0.886720811  3.110578e+00\n[136,]",
        "  0.858293823  0.222534448  0.066669695  0.503502742  3.293675e-01\n[137,]  0.014597888 -0.008035075  0.085745747  0.052223516  1.456341e-02\n[138,]  0.182723401 -0.793919459 -0.126375626 -0.183565234 -1.788591e-01\n[139,] -0.251138727 -0.126788463 -0.101269024 -1.193217406 -5.975999e-01\n[140,] -1.080083092  0.114657164 -1.284376501 -1.038829332  6.683383e-01\n[141,] -0.206898333  0.155195179 -1.404700979 -1.378957248 -5.547350e-01\n[142,]  0.158954205  0.731552672  0.190844233  0.907779579  2.264989e-01\n[143,]  1.314300731",
        "  1.718991754  1.043112405  1.912739461  1.457415e+00\n[144,]  0.596555029  0.249086515  2.228530656  2.754907995  2.173974e+00\n[145,] -1.501357251 -0.621961944 -1.944779603 -0.162111524 -1.494565e+00\n[146,] -0.875426539 -0.433002426 -0.136158530  0.730109269  2.449815e-01\n[147,]  0.076208352 -0.328763823 -0.381117430 -0.384898195  3.424856e-02\n[148,] -0.486445362 -0.158894419 -0.419078052 -0.345012110 -3.212275e-01\n[149,]  0.134656358  0.452684240  0.018384681  0.507390566  2.162015e-01\n[150,]  1.083559922  0.654406704",
        "  0.658804212  0.814969294  9.321395e-01\n[151,]  0.741635468  1.401462057  1.209898604  0.858441730  9.338007e-01\n[152,] -0.936077044 -0.720955710 -0.760656303 -0.797302279 -1.102296e+00\n[153,]  0.850855202 -0.044047577 -0.046842373  0.523125102  6.304566e-01\n[154,] -0.940743194 -2.352726995 -0.472044540 -2.626513545 -5.238920e-01\n[155,]  2.423061945  2.015748931  2.271308359  2.399547665  1.649634e+00\n[156,] -1.521274530 -0.804519376 -0.289381859 -1.158951282 -6.324676e-01\n[157,] -1.010029669 -0.743347509 -0.816674644",
        " -0.581604372 -4.604734e-01\n[158,]  0.153848958 -0.139085216  0.933092648  0.198063980 -3.493183e-01\n[159,] -1.872269865 -2.720645520 -3.149187115 -2.088356589 -1.730122e+00\n[160,] -0.117675017 -0.235436225 -0.137593021  0.191777939  2.928438e-02\n[161,] -0.153530972 -0.165415995 -0.178654368 -0.229734391 -2.044265e-01\n[162,] -0.271003089 -0.746861213  1.964642241 -1.015544124 -5.786055e-01\n[163,] -0.167884024 -0.022701458 -0.068693270 -0.361765850  8.864256e-03\n[164,] -0.643353561  0.232614867 -1.118433636  0.547325873",
        "  1.837384e+00\n[165,] -2.184466062 -2.664609085 -0.856312593 -1.178497929 -2.483718e+00\n[166,] -0.116892341 -0.576302041  0.213792036  0.340770126 -3.298942e-01\n[167,] -0.801535313  0.140448382 -0.605753659  0.923105633 -1.482081e+00\n[168,]  0.659060739  0.209405574 -0.541696746  0.415185791  3.972237e-01\n[169,]  1.632706688  2.277640864  3.086239241  1.977777561  2.731154e+00\n[170,] -0.273282409 -0.459278588 -0.900655183 -0.595757651 -7.249054e-01\n[171,] -0.620429975  0.072176976 -0.706599012 -0.826416538 -4.306650e-01",
        "\n[172,]  0.379225992  1.056030075  0.142412184  0.430568388  1.246123e+00\n[173,] -0.568518650 -0.492752064 -0.622178270 -1.059238233 -2.457291e-01\n[174,]  0.095683256  0.347058238  0.208814429  0.119308773  2.929675e-01\n[175,]  1.019223075  0.313416578  0.742227808  1.693694601  1.141620e+00\n[176,] -0.353483197 -0.071716748  0.596587112 -0.416675348  6.813334e-01\n[177,] -0.530918280 -0.202755060 -0.962488246 -0.097849036  2.643252e-01\n[178,]  0.548196327  1.202729579  1.164752696  0.798153980  1.418662e+00\n[179,]",
        " -0.486687139 -0.794354106 -0.400348006  0.402897888 -1.106906e-01\n[180,] -1.603993094 -0.157408797  0.178179551  0.523820232  7.011781e-01\n[181,] -0.837707815 -0.333314479 -0.061647785 -0.064349239  1.226800e-03\n[182,] -0.030421696  0.653846127 -0.096109151  0.128037527  1.625184e-01\n[183,] -1.640956734 -0.208239951 -1.855569066 -1.101845739  2.424356e-02\n[184,] -1.973420020 -1.663044406 -2.245640556 -1.639780676 -1.289694e+00\n[185,]  0.596453464  0.137312230  0.188943500  0.268128295  2.415248e-01\n[186,] -0.729115614",
        " -0.926009811 -1.219453624 -0.491426813 -1.553806e+00\n[187,]  1.489076667  1.357350917  1.522391742  1.176948149  1.111188e+00\n[188,] -0.102267662 -0.745504551 -0.598296615 -0.174538768 -1.124575e-01\n[189,] -0.763135022 -1.555085613 -1.330896871 -0.781819337 -4.425779e-01\n[190,]  0.585281494  0.586721437 -0.133882663 -0.540455946 -8.672787e-01\n[191,]  0.213168264  0.255376554  0.397562137  0.235572857  1.720627e-01\n[192,] -0.177758284 -0.622798246 -1.070222352 -0.517100112 -8.291368e-01\n[193,] -0.312402092 -0.081072331",
        "  0.178227922 -0.740723056 -9.243421e-01\n[194,]  0.804900743  0.533648735  0.246401336  0.903250403  7.804915e-01\n[195,] -0.207922150 -0.378483452 -0.353097111 -0.421215547 -3.809829e-01\n[196,] -0.278735051 -0.538352313 -0.375755280 -0.008161046 -1.210575e-01\n[197,]  0.155629109  0.012992510  0.818177371  0.351492215  4.536659e-01\n[198,] -0.458645744 -1.279540025 -1.341790991 -0.876358820 -1.270177e+00\n[199,] -0.243174228 -0.427763862 -0.191778119 -0.700514736 -5.327351e-01\n[200,] -2.517177930 -1.715912905 -3.173251757",
        " -2.778255138 -2.570337e+00\n [ reached getOption(\"max.print\") -- omitted 300 rows ]\n",
        "> ",
        "alphaci(x, bootstrap = TRUE)",
        "> ",
        "x <- LaplacesDemon::rmvl(50, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "> ",
        "x",
        "               [,1]         [,2]         [,3]         [,4]         [,5]\n [1,]  1.2667226648 -0.414507734  0.691361997  1.530921046  0.772944077\n [2,] -0.3034492386 -0.132475301  0.254835586 -0.160559284 -0.038575022\n [3,]  2.0710321366  3.121038160  1.839252883  3.246428841  2.783852255\n [4,] -0.1618171003  0.400837547 -0.447891732  0.319845763  0.758288996\n [5,]  0.0004717379  0.023302746  0.031733168  0.016386436  0.012195390\n [6,] -0.6267619699  0.187081762  1.080745302  1.109888576  1.549366064\n [7,] -0.6336329282",
        " -0.563465279 -0.220793450 -0.437441807 -0.045724087\n [8,]  0.1835874673  1.067038613 -0.886564581  0.567076862  0.869609851\n [9,] -0.4552461268 -0.713151999 -1.314818113 -1.011138543 -0.813190605\n[10,] -1.0671227864  0.635375754 -0.034756022 -1.406802278 -0.222968574\n[11,] -1.3498453411  0.584068817 -1.611973752 -1.980461587 -0.747484779\n[12,] -0.2213769130 -0.195332027 -0.280780331 -0.546568344  0.185954403\n[13,]  0.4897858607 -0.380489174 -0.132287504 -0.253246991 -0.137330576\n[14,]  0.5038726854 -1.856019582",
        "  0.411148510 -1.101487012 -1.663404423\n[15,]  0.6286922986  0.142871295  0.067961638  0.853310839 -0.433668383\n[16,]  0.4562717770  1.269842864  0.060288714  0.246889459  0.591742230\n[17,]  0.3427322763  0.190285982  0.093347621  0.511678340  0.610534472\n[18,]  0.0033686551 -0.022831013 -0.155121866 -0.117969935  0.018161376\n[19,] -0.3759671405 -0.080444266  0.073909960  0.712845394  0.400019867\n[20,]  1.1829532772  2.355652899  1.425776705  0.325099572  1.925651091\n[21,] -1.6674405000 -0.455868220 -1.563708472",
        " -0.560986862 -0.770265249\n[22,]  0.0697979847 -0.827835417 -1.326848738 -0.153370303  0.977468661\n[23,] -1.2567776905  0.369835977 -0.070807096 -1.138641096 -1.234445120\n[24,]  0.9220736707 -0.651570715 -0.134623940 -0.901453637 -1.246732191\n[25,] -0.4160861083 -0.069550657 -0.009320605 -0.103915915  0.189571848\n[26,]  0.1006383623  0.040492603  0.121184549  0.111486433  0.008083347\n[27,]  0.1893906964  0.505353906  0.297620083 -0.382413184  1.230302101\n[28,]  0.0751543861 -0.247011231  0.473813191 -0.062193731",
        "  1.164681093\n[29,]  0.0251646368 -0.567793629  0.392187854 -0.069355484 -0.224469738\n[30,]  0.1661953132 -0.133705830 -0.246555799 -0.616953892  0.174930011\n[31,]  0.5281570061  0.759855565  0.543595837  1.134949401  0.119735288\n[32,] -0.0806199883 -0.001753188 -0.305074994 -0.296351433  0.375483228\n[33,]  1.1913910753  1.465026439  0.970208921  1.273669445  1.060242387\n[34,] -1.1464676869 -1.333972641 -0.604154772  0.216866814  0.302014865\n[35,] -0.5768367772 -0.642817844 -0.679501532 -0.606010537 -0.730206832",
        "\n[36,] -0.0884241862  0.473094700 -0.578396224 -0.059976066  0.151528513\n[37,]  1.0140416972  0.849173145  1.617676972  0.888549796  1.023117054\n[38,]  0.7238139646 -0.028599216  0.255376253  0.273647048  0.059727748\n[39,] -1.9092765755 -1.417072013 -2.486004840 -1.184565692 -1.772379742\n[40,] -0.2367120570 -0.018864016 -0.200256072 -0.278204620 -0.379400467\n[41,]  1.4926452548 -0.509249196  0.551625104 -0.008504496  0.649653612\n[42,] -1.5897924972 -0.373804962 -1.879623764 -0.109802664 -1.153224744\n[43,] -0.0856017331",
        "  0.161312467  0.154728915  0.085831242 -0.235395724\n[44,]  0.1024616493 -0.083651464  0.133577647  0.124355552  0.005749431\n[45,] -0.2897373762  0.550504617  0.381477465  0.856051065  0.167389829\n[46,]  0.0736328801  0.359141966 -0.175677296 -0.322607667 -0.247207581\n[47,]  0.3275679438  0.831881219  0.019704835  0.588425674  0.187680627\n[48,]  1.1582662812  1.044690874  1.236301498  0.917229234  1.547268763\n[49,]  0.0389408701  0.233923846  0.933928641  0.526335685  0.635287811\n[50,]  0.1656624950  1.248990129",
        "  0.503051105  0.946684958  0.622001510\n",
        "> ",
        "alphaci_std",
        "function(x,\n                        type = c(\"adf\", \"elliptical\", \"normal\"),\n                        transform = \"none\",\n                        parallel = FALSE,\n                        conf_level = 0.95,\n                        alternative = c(\"two.sided\", \"greater\", \"less\"),\n                        bootstrap = FALSE,\n                        n_reps = 1000) {\n  call <- match.call()\n\n  type <- match.arg(type)\n  alternative <- match.arg(alternative)\n\n  transformer <- get_transformer(transform)\n  quants <- limits(alternative, conf_level)\n",
        "  x <- stats::na.omit(as.matrix(x))\n\n  sigma <- stats::cov(x)\n  est <- alpha(sigma)\n  sd <- sqrt(avar_std(x, sigma, type, parallel))\n\n  ci <- if (!bootstrap) {\n    ci_asymptotic(est, sd, nrow(x), transformer, quants)\n  } else {\n    ci_boot(\n      x,\n      est,\n      sd,\n      type,\n      transformer,\n      parallel,\n      quants,\n      n_reps,\n      standardized = TRUE\n    )\n  }\n\n  names(ci) <- quants\n  attr(ci, \"conf.level\") <- conf_level\n  attr(ci, \"alternative\") <- alternative\n  attr(ci, \"type\") <- type\n",
        "  attr(ci, \"n\") <- nrow(x)\n  attr(ci, \"parallel\") <- parallel\n  attr(ci, \"transform\") <- transform\n  attr(ci, \"bootstrap\") <- bootstrap\n  attr(ci, \"n_reps\") <- n_reps\n  attr(ci, \"estimate\") <- est\n  attr(ci, \"sd\") <- sd\n  attr(ci, \"call\") <- call\n  class(ci) <- \"alphaci\"\n  ci[2] <- min(ci[2], 1)\n  ci\n}\n<bytecode: 0x000001f85e91a270>\n<environment: namespace:alphaci>\n",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;255m\u001B[36mi\u001B[38;5;255m Loading \u001B[34malphaci\u001B[38;5;255m\u001B[39m\n",
        "> ",
        "studentized_boots(100, x, type = \"adf\", parallel = FALSE, transformer = transformer_none)",
        "> ",
        "standardized = FALSE",
        "> ",
        "  fun <- if (standardized) alpha_std else alpha",
        "> ",
        "  est <- fun(stats::cov(x))",
        "> ",
        "fun",
        "function(sigma, lambda) {\n  if (!missing(lambda)) sigma <- covmat(lambda, sigma)\n  k <- nrow(sigma)\n  k / (k - 1) * (1 - tr(sigma) / sum(sigma))\n}\n<environment: namespace:alphaci>\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "Error in avar(x[indices_star, ], sigma_star, type, parallel) : \n  object 'type' not found\n",
        "> ",
        "type = \"adf\"",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "Error: object 'transformer' not found\n",
        "> ",
        "transformer = transformer_none",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.09841022\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.03514666\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.1819096\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.03735052\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.06519526\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.2818963\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.1373563\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.08517507\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.1069507\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.06067011\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.01500445\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.2873036\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.01470742\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.1086234\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.2668453\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.1455079\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.04638675\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] -0.02367278\n",
        "> ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "> ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "> ",
        "      est_star <- fun(sigma_star)",
        "> ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "> ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "[1] 0.09777437\n",
        "> ",
        "n_reps",
        "Error: object 'n_reps' not found\n",
        "> ",
        "n_reps = 100",
        "> ",
        "  fun <- if (standardized) alpha_std else alpha",
        "> ",
        "  est <- fun(stats::cov(x))",
        "> ",
        "  future.apply::future_replicate(n_reps,",
        "+ ",
        "    {",
        "+ ",
        "      indices_star <- sample(nrow(x), nrow(x), replace = TRUE)",
        "+ ",
        "      sigma_star <- stats::cov(x[indices_star, ])",
        "+ ",
        "      est_star <- fun(sigma_star)",
        "+ ",
        "      sd_star <- sqrt(avar(x[indices_star, ], sigma_star, type, parallel))",
        "+ ",
        "      (transformer$est(est_star) - transformer$est(est)) /",
        "+ ",
        "        transformer$sd(est_star, sd_star)",
        "+ ",
        "    },",
        "+ ",
        "    future.seed = TRUE",
        "+ ",
        "  )",
        "\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "x <- LaplacesDemon::rmvl(50, mu = rep(0, k), Sigma = sigma)",
        "Error in rbind(mu) : object 'k' not found\n",
        "> ",
        "x <- LaplacesDemon::rmvl(50, mu = rep(0, k), Sigma = sigma)",
        "Error in rbind(mu) : object 'k' not found\n",
        "> ",
        "library(\"psychTools\")",
        "> ",
        "x <- bfi[, 1:5]",
        "> ",
        "x[, 1] <- 7 - x[, 1] # Reverse-coded item.",
        "> ",
        "x <- na.omit(x)",
        "> ",
        "avar_std(x, cov(x), type = \"adf\", parallel = FALSE)",
        "Error in avar_std(x, cov(x), type = \"adf\", parallel = FALSE) : \n  could not find function \"avar_std\"\n",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;255m\u001B[36mi\u001B[38;5;255m Loading \u001B[34malphaci\u001B[38;5;255m\u001B[39m\n",
        "> ",
        "library(\"psychTools\")",
        "> ",
        "x <- bfi[, 1:5]",
        "> ",
        "x[, 1] <- 7 - x[, 1] # Reverse-coded item.",
        "> ",
        "x <- na.omit(x)",
        "> ",
        "avar_std(x, cov(x), type = \"adf\", parallel = FALSE)",
        "[1] 0.2723457\n",
        "> ",
        "avar(x, cov(x), type = \"adf\", parallel = FALSE)",
        "[1] 0.3065797\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(\"future.apply\")",
        "> ",
        "plan(multisession)",
        "> ",
        "",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- simulate_congeneric(n, 5, sigma, lambda)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- simulate_congeneric(10000, 5, sigma, lambda)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = FALSE)",
        "Error in diag(k^2) : object 'k' not found\n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = FALSE)",
        "[1] 0.1675294\n",
        "> ",
        "var(results) * n",
        "[1] 0.3168791\n",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "Call: alphaci_std(x = x, bootstrap = TRUE)\n\n95% confidence interval (n = 50).\n    0.025     0.975 \n0.6625111 0.9322225 \n\nSample estimates.\n    alpha        sd \n0.7785401 0.3655433 \n",
        "> ",
        "#set.seed(313)",
        "> ",
        "sigma <- runif(5)",
        "> ",
        "lambda <- runif(5)",
        "> ",
        "n <- 1000",
        "> ",
        "k <- 5",
        "> ",
        "sigma <- cov(mtcars[, sample(11, 5, replace = TRUE)])",
        "> ",
        "sigma <- matrix(runif(1), k, k)",
        "> ",
        "diag(sigma) <- 1",
        "> ",
        "",
        "> ",
        "results <- future_replicate(10000, {",
        "+ ",
        "  x <- LaplacesDemon::rmvl(n, mu = rep(0, k), Sigma = sigma)",
        "+ ",
        "  alphaci:::alpha_std(cov(x))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50000, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "avar_std(x, cov(x), type = \"normal\", parallel = FALSE)",
        "[1] 0.01181355\n",
        "> ",
        "var(results) * n",
        "[1] 0.02300244\n",
        "> ",
        "",
        "> ",
        "x <- LaplacesDemon::rmvl(50, mu = rep(0, k), Sigma = sigma)",
        "> ",
        "alphaci_std(x, bootstrap = TRUE)",
        "Call: alphaci_std(x = x, bootstrap = TRUE)\n\n95% confidence interval (n = 50).\n    0.025     0.975 \n0.8718282 0.9549524 \n\nSample estimates.\n    alpha        sd \n0.9033437 0.1318991 \n\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "> ",
        "devtools::load_all(\".\")",
        "\u001B[38;5;255m\u001B[36mi\u001B[38;5;255m Loading \u001B[34malphaci\u001B[38;5;255m\u001B[39m\n\nRestarting R session...\n\n",
        "> ",
        "library(alphaci)",
        "\nRestarting R session...\n\n"
    ]
}