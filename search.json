[{"path":"https://jonasmoss.github.io/alphaci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 alphaci authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonasmoss.github.io/alphaci/articles/simulations.html","id":"setting-up-the-simulations","dir":"Articles","previous_headings":"","what":"Setting up the simulations","title":"Simulation of confidence intervals.","text":"use dataset bfi package psych together lavaan estimate realistic factor loadings \\(\\lambda\\) standard deviations \\(\\sigma\\). take absolute value lambda vector agreement data contains reverse-coded items.","code":"model <- c(\"y =~ A1 + A2 + A3 + A4 + A5\") fit <- lavaan::cfa(model, data = psych::bfi) coefs <- lavaan::lavInspect(fit, what = \"x\") lambda <- abs(c(coefs$lambda * sqrt(as.numeric(coefs$psi)))) sigma <- sqrt(diag(lavaan::lavInspect(fit, what = \"x\")$theta))"},{"path":"https://jonasmoss.github.io/alphaci/articles/simulations.html","id":"comparing-confidence-intervals-coverages-and-lengths","dir":"Articles","previous_headings":"","what":"Comparing confidence intervals coverages and lengths","title":"Simulation of confidence intervals.","text":"compare five confidence intervals, without transformations. adf interval asymptotic distribution-free interval, ell interval interval based elliptical distributions kurtosis correction, ell_par elliptical interval assuming parallel model. comments hold norm (assuming normal data) norm_par (assuming parallel normal data). simulation normal error terms Laplace-distributed latent variable. one excess kurtosis \\(3\\), caries large part data. k number questions ands n_reps number simulations. Let’s check results \\(n= 10\\). appears kurtosis corrections work well, least small sample size. Let’s see perform \\(n\\) increases. Plotting coverages, find, 1 asymptotically distribution-free, 2 elliptical, 3 paralell elliptical, 4 normal 5 parallel normal.  Hence kurtosis correction intervals better coverage adf interval \\(n\\leq 50\\) outperforms normal theory intervals \\(n\\). observation general remains seen.","code":"library(\"alphaci\") library(\"future.apply\") plan(multisession, workers = availableCores() - 2) set.seed(313)  n_reps <- 10000 k <- 5 latent <- \\(n) extraDistr::rlaplace(n) / sqrt(2) true <- alphaci:::alpha(sigma, lambda) success <- \\(ci) true <= ci[2] & true >= ci[1] len <- \\(ci) ci[2] - ci[1] simulations <- \\(n) {     results  <- future.apply::future_replicate(n_reps, {       x <- alphaci:::simulate_congeneric(n, k, sigma, lambda, latent = latent)       cis <- rbind(adf = alphaci(x, type = \"adf\"),         adf_par = alphaci(x, type = \"adf\", parallel = TRUE),         ell = alphaci(x, type = \"elliptical\"),         ell_par = alphaci(x, type = \"elliptical\", parallel = TRUE),         norm = alphaci(x, type = \"normal\"),         norm_par = alphaci(x, type = \"normal\", parallel = TRUE)       )       c(cov = apply(cis, 1, success), len = apply(cis, 1, len))       }, future.seed = TRUE)   rowMeans(results) } simulations(10) #>      cov.adf  cov.adf_par      cov.ell  cov.ell_par     cov.norm cov.norm_par      len.adf  len.adf_par  #>    0.8745000    0.7942000    0.9513000    0.9566000    0.9223000    0.9297000    0.7680810   55.3239940  #>      len.ell  len.ell_par     len.norm len.norm_par  #>    1.0238478    1.0499270    0.9113473    0.9342908 nn <- c(5, 10, 20, 30, 40, 50, 100, 200, 500, 1000, 2000, 5000) results <- sapply(nn, simulations) matplot(nn, t(results[1:5, ]), xlab = \"n\", ylab = \"Coverage\", type = \"b\",         log = \"x\") abline(h = 0.95, lty = 2)"},{"path":"https://jonasmoss.github.io/alphaci/articles/verification.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Verifying the variances.","text":"Combining type parallel options alphaci yields total \\(6\\) different asymptotic variance estimates. file informally verify computations estimates. setup \\(n = 1,000,000\\), suffice. use \\(k = 5\\) across board.","code":"library(\"future.apply\") plan(multisession) avar <- alphaci:::avar avar_std <- alphaci:::avar_std set.seed(313) k <- 5 n <- 10 ** 6 print_table <- function(x) {   table <- rbind(   c(\"normal\" = avar(x, sigma_mat, type = \"normal\", parallel = FALSE),     \"adf\" = avar(x, sigma_mat, type = \"adf\", parallel = FALSE),     \"elliptical\" = avar(x, sigma_mat, type = \"elliptical\", parallel = FALSE),     \"normal_par\" = avar(x, sigma_mat, type = \"normal\", parallel = TRUE),     \"adf_par\" = avar(x, sigma_mat, type = \"adf\", parallel = TRUE),     \"elliptical_par\" = avar(x, sigma_mat, type = \"elliptical\", parallel = TRUE)),   c(\"normal\" = avar_std(x, sigma_mat, type = \"normal\", parallel = FALSE),     \"adf\" = avar_std(x, sigma_mat, type = \"adf\", parallel = FALSE),     \"elliptical\" = avar_std(x, sigma_mat, type = \"elliptical\", parallel = FALSE),     \"normal_par\" = avar_std(x, sigma_mat, type = \"normal\", parallel = TRUE),     \"adf_par\" = avar_std(x, sigma_mat, type = \"adf\", parallel = TRUE),     \"elliptical_par\" = avar_std(x, sigma_mat, type = \"elliptical\", parallel = TRUE))   )   rownames(table) <- c(\"alpha\", \"alpha_std\")   knitr::kable(round(table, 3)) }"},{"path":"https://jonasmoss.github.io/alphaci/articles/verification.html","id":"normality","dir":"Articles","previous_headings":"","what":"Normality","title":"Verifying the variances.","text":"First simulate normal model isn’t parallel. normal model equal normal parallel method. Moreover, adf method approximately equal normal method, adpf paralell model equal adf model. table confirms points. normal parallel model true, methods yield approximately result. , case.","code":"lambda <- 1/(5:1)^2 sigma <- 1/(1:5)^2 x <- alphaci:::simulate_congeneric(n, k, sigma, lambda) sigma_mat <- cov(x) print_table(x) lambda <- 1 sigma <- 2 x <- alphaci:::simulate_congeneric(n, k, sigma, lambda) sigma_mat <- cov(x) print_table(x)"},{"path":"https://jonasmoss.github.io/alphaci/articles/verification.html","id":"ellipticity","dir":"Articles","previous_headings":"","what":"Ellipticity","title":"Verifying the variances.","text":"simulate elliptical model, multivariate Laplace, neither parallel normal. elliptical model equal elliptical parallel method, normal models equal elliptical models. Moreover, adf method approximately equal elliptical method, adpf paralell model equal adf model. table confirms points. Finally, check eliptical parallel model. adfs elliptical equal, equal normal. table confirms .","code":"lambda <- 1/(5:1)^2 sigma <- 1/(1:5)^2 mat <- lambda %*% t(lambda) + diag(sigma) x <- LaplacesDemon::rmvl(n, mu = 0, Sigma = mat) sigma_mat <- cov(x) print_table(x) lambda <- 1 sigma <- 2 mat <- rep(1, k) %*% t(rep(1, k)) * lambda^2 + diag(sigma, nrow = k) x <- LaplacesDemon::rmvl(n, mu = 0, Sigma = mat) sigma_mat <- cov(x) print_table(x)"},{"path":"https://jonasmoss.github.io/alphaci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonas Moss. Author, maintainer.","code":""},{"path":"https://jonasmoss.github.io/alphaci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moss J (2024). alphaci: Confidence Intervals Coefficient Alpha Standardized Alpha. R package version 1.0.1, https://jonasmoss.github.io/alphaci/.","code":"@Manual{,   title = {alphaci: Confidence Intervals for Coefficient Alpha and Standardized Alpha},   author = {Jonas Moss},   year = {2024},   note = {R package version 1.0.1},   url = {https://jonasmoss.github.io/alphaci/}, }"},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"alphaci-","dir":"","previous_headings":"","what":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"R package inference coefficient alpha (Cronbach, 1951) standardized alpha (Falk & Savalei, 2011). Many methods supported, special emphasis small samples non-normality.","code":""},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"package available CRAN yet, use following command inside R:","code":"# install.packages(\"remotes\") remotes::install_github(\"JonasMoss/alphaci\")"},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"Call library function load data: calculate asymptotically distribution-free confidence interval , can also calculate confidence intervals standardized alpha","code":"library(\"alphaci\") library(\"psychTools\") x <- bfi[, 1:5] x[, 1] <- 7 - x[, 1] # Reverse-coded item. head(x) #>       A1 A2 A3 A4 A5 #> 61617  5  4  3  4  4 #> 61618  5  4  5  2  5 #> 61620  2  4  5  4  4 #> 61621  3  4  6  5  5 #> 61622  5  3  3  4  5 #> 61623  1  6  5  6  5 alphaci(x) #> Call: alphaci(x = x) #>  #> 95% confidence interval (n = 2709). #>     0.025     0.975  #> 0.6828923 0.7246195  #>  #> Sample estimates. #>     alpha        sd  #> 0.7037559 0.5536964 alphaci_std(x) #> Call: alphaci_std(x = x) #>  #> 95% confidence interval (n = 2709). #>     0.025     0.975  #> 0.6938373 0.7331658  #>  #> Sample estimates. #>     alpha        sd  #> 0.7135016 0.5218675"},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"supported-techniques","dir":"","previous_headings":"","what":"Supported techniques","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"alphaci supports three basic asymptotic confidence interval constructios. asymptotically distribution-free interval Maydeu-Olivares et al. 2007, pseudo-elliptical construction Yuan & Bentler (2002), normal method van Zyl et al., (1999). Standardized alpha, computed alpha_std, support type arguments. formulas can derived using methods Hayashi Kamata (2005) Neudecker (2007). addition, may transform intervals using one four transforms: Fisher transform, . Famously used inference correlation coefficient.  transform, . asymptotic pivot elliptical model parallel items. identity transform. default option.  transform. transform might fail  small, negative values  possible,  accept , option bootstrap studentized bootstrapping Efron, B. (1987) n_reps repetitions. bootstrap = FALSE, ordinary normal approximation used. studentized bootstrap intervals second-order correct, confidence intervals better normal approximation  sufficiently large. Finally, option parallel = TRUE can used, suitable covariance matrix  compound symmetric. distribution normal (pseudo-)elliptic, can used simplify expression asymptotic variance alpha standardized alpha {2}=(1-){2},  common kurtosis parameter.","code":""},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"similar-software","dir":"","previous_headings":"","what":"Similar software","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"several R packages make confidence intervals coefficient alpha, much support standardized alpha. packages use sort normality assumption. alpha alpha.ci functions psych calculates confidence intervals coefficient alpha following normal theory. semTools calculates numerous reliability coefficients reliability function. Cronbach package provides confidence intervals based normal theory, alpha.CI function psychometric. Confidence intervals alphas can, principle, calculated using structural equation modeling together delta method. Packages lavaan can used purpose, seldom done.","code":""},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"how-to-contribute-or-get-help","dir":"","previous_headings":"","what":"How to Contribute or Get Help","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"encounter bug, feature request need help, open Github issue. Create pull requests contribute.","code":""},{"path":"https://jonasmoss.github.io/alphaci/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Confidence Intervals for Coefficient Alpha and Standardized Alpha","text":"Falk, C. F., & Savalei, V. (2011). relationship unstandardized standardized alpha, true reliability, underlying measurement model. Journal Personality Assessment, 93(5), 445-453. https://doi.org/10.1080/00223891.2011.594129 Cronbach, L. J. (1951). Coefficient alpha internal structure tests. Psychometrika, 16(3), 297-334. https://doi.org/10.1007/BF02310555#’ Efron, B. (1987). Better Bootstrap Confidence Intervals. Journal American Statistical Association, 82(397), 171-185. https://doi.org/10.2307/2289144 Maydeu-Olivares, ., Coffman, D. L., & Hartmann, W. M. (2007). Asymptotically distribution-free (ADF) interval estimation coefficient alpha. Psychological Methods, 12(2), 157-176. https://doi.org/10.1037/1082-989X.12.2.157 van Zyl, J. M., Neudecker, H., & Nel, D. G. (2000). distribution maximum likelihood estimator Cronbach’s alpha. Psychometrika, 65(3), 271-280. https://doi.org/10.1007/BF02296146 Yuan, K.-H., & Bentler, P. M. (2002). robustness normal-theory based asymptotic distributions three reliability coefficient estimates. Psychometrika, 67(2), 251-259. https://doi.org/10.1007/BF02294845 Joanes, D. N., & Gill, C. . (1998). Comparing measures sample skewness kurtosis. Journal Royal Statistical Society: Series D (Statistician), 47(1), 183-189. https://doi.org/10.1111/1467-9884.00122 Hayashi, K., & Kamata, . (2005). note estimator alpha coefficient standardized variables normality. Psychometrika, 70(3), 579-586. https://doi.org/10.1007/s11336-001-0888-1 Neudecker, H. (2006). Asymptotic Distribution “Natural” Estimator Cronbach’s Alpha Standardised Variates Nonnormality, Ellipticity Normality. P. Brown, S. Liu, & D. Sharma (Eds.), Contributions Probability Statistics: Applications Challenges (pp. 167-171). World Scientific. https://doi.org/10.1142/9789812772466_0013","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for alpha and standardized alpha — alphaci","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"Calculate confidence intervals coefficient alpha (Cronbach, 1951) standardized alpha (Falk & Savalei, 2011) using asymptotic methods studentized bootstrap. alphaci constructs confidence intervals coefficient alpha alphaci_std standardized alpha.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"","code":"alphaci(   x,   type = c(\"adf\", \"elliptical\", \"normal\"),   transform = \"none\",   parallel = FALSE,   conf_level = 0.95,   alternative = c(\"two.sided\", \"greater\", \"less\"),   bootstrap = FALSE,   n_reps = 1000 )  alphaci_std(   x,   type = c(\"adf\", \"elliptical\", \"normal\"),   transform = \"none\",   parallel = FALSE,   conf_level = 0.95,   alternative = c(\"two.sided\", \"greater\", \"less\"),   bootstrap = FALSE,   n_reps = 1000 )"},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"x Input data data can converted matrix using .matrix. Rows containing missing values ignored. type Type confidence interval. Either adf, elliptical, normal. transform One \"none\", \"log\", \"fisher\", \"arcsin. Defaults \"none\". parallel TRUE, makes calculations assumption parallel model. Defaults FALSE. conf_level Confidence level. Defaults 0.95. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\". bootstrap TRUE, performs studentized bootstrap n_reps repetitions. Defaults FALSE. n_reps Number bootstrap samples bootstrap = TRUE. Ignored bootstrap = FALSE. Defaults 1000.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"vector class alphaci containing confidence end points. arguments function call included attributes.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"methods accept handle missing data using stats::na.omit, .e., rows containing missing data removed. bootstrap option uses studentized bootstrap (Efron, B. 1987), second order correct. functions makes use future.apply bootstrapping. type variables defaults adf, asymptotically distribution-free, consistent fourth moment finite (Maydeu-Olivares et al. 2007). normal option assumes normality. (van Zyl et al. 1999), concistent models excess kurtosis unequal 0. elliptical option assumes elliptical pseudo-elliptical distribution data. resulting confidence intervals corrected variants normal theory intervals kurtosis correction (Yuan & Bentler 2002). common kurtosis parameter calculated using unbiased sample kurtosis (Joanes, 1998). methods analogues standardized alpha, can derived using methods Hayashi & Kamata (2005) Neudecker (2006).","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"Falk, C. F., & Savalei, V. (2011). relationship unstandardized standardized alpha, true reliability, underlying measurement model. Journal Personality Assessment, 93(5), 445-453. https://doi.org/10.1080/00223891.2011.594129 Cronbach, L. J. (1951). Coefficient alpha internal structure tests. Psychometrika, 16(3), 297-334. https://doi.org/10.1007/BF02310555#' Efron, B. (1987). Better Bootstrap Confidence Intervals. Journal American Statistical Association, 82(397), 171-185. https://doi.org/10.2307/2289144 Maydeu-Olivares, ., Coffman, D. L., & Hartmann, W. M. (2007). Asymptotically distribution-free (ADF) interval estimation coefficient alpha. Psychological Methods, 12(2), 157-176. https://doi.org/10.1037/1082-989X.12.2.157 van Zyl, J. M., Neudecker, H., & Nel, D. G. (2000). distribution maximum likelihood estimator Cronbach's alpha. Psychometrika, 65(3), 271-280. https://doi.org/10.1007/BF02296146 Yuan, K.-H., & Bentler, P. M. (2002). robustness normal-theory based asymptotic distributions three reliability coefficient estimates. Psychometrika, 67(2), 251-259. https://doi.org/10.1007/BF02294845 Joanes, D. N., & Gill, C. . (1998). Comparing measures sample skewness kurtosis. Journal Royal Statistical Society: Series D (Statistician), 47(1), 183-189. https://doi.org/10.1111/1467-9884.00122 Hayashi, K., & Kamata, . (2005). note estimator alpha coefficient standardized variables normality. Psychometrika, 70(3), 579-586. https://doi.org/10.1007/s11336-001-0888-1 Neudecker, H. (2006). Asymptotic Distribution Natural Estimator Cronbach's Alpha Standardised Variates Nonnormality, Ellipticity Normality. P. Brown, S. Liu, & D. Sharma (Eds.), Contributions Probability Statistics: Applications Challenges (pp. 167-171). World Scientific. https://doi.org/10.1142/9789812772466_0013","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/alphaci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence intervals for alpha and standardized alpha — alphaci","text":"","code":"library(\"alphaci\") library(\"psychTools\") x <- bfi[, 1:5] x[, 1] <- 7 - x[, 1] # Reverse-coded item. alphaci(x) #> Call: alphaci(x = x) #>  #> 95% confidence interval (n = 2709). #>     0.025     0.975  #> 0.6828923 0.7246195  #>  #> Sample estimates. #>     alpha        sd  #> 0.7037559 0.5536964  alphaci_std(x) #> Call: alphaci_std(x = x) #>  #> 95% confidence interval (n = 2709). #>     0.025     0.975  #> 0.6938373 0.7331658  #>  #> Sample estimates. #>     alpha        sd  #> 0.7135016 0.5218675   # Calculate confidence intervals with other options. library(\"lavaan\") #> This is lavaan 0.6-17 #> lavaan is FREE software! Please report any bugs. x <- lavaan::HolzingerSwineford1939[1:20, 7:9] results <- c(   alphaci(x, type = \"adf\", parallel = FALSE),   alphaci(x, type = \"adf\", parallel = TRUE),   alphaci(x, type = \"elliptical\", parallel = FALSE),   alphaci(x, type = \"elliptical\", parallel = TRUE),   alphaci(x, type = \"normal\", parallel = FALSE),   alphaci(x, type = \"normal\", parallel = TRUE) )"},{"path":"https://jonasmoss.github.io/alphaci/reference/ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates asymptotic confidence intervals. — ci","title":"Calculates asymptotic confidence intervals. — ci","text":"Calculates asymptotic confidence intervals.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates asymptotic confidence intervals. — ci","text":"","code":"ci_asymptotic(est, sd, n, transformer, quants)  ci_boot(   x,   est,   sd,   type,   transformer,   parallel,   quants,   n_reps,   standardized = FALSE )"},{"path":"https://jonasmoss.github.io/alphaci/reference/ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates asymptotic confidence intervals. — ci","text":"est, sd estimate estimated standard deviation. n Number observations. transformer transformer object. quants Quantiles confidence interval. x Data estimate alpha . type Type confidence interval. Either adf, elliptical, normal. parallel TRUE, makes calculations assumption parallel model. Default FALSE. n_reps Number bootstrap samples bootstrap = TRUE. Ignored bootstrap = FALSE. standardized TRUE, calculates standardized alpha. Calculates coefficient alpha otherwise.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/covmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform lambda and sigma to a covariance matrix. — covmat","title":"Transform lambda and sigma to a covariance matrix. — covmat","text":"Transform lambda sigma covariance matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/covmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform lambda and sigma to a covariance matrix. — covmat","text":"","code":"covmat(lambda, sigma)"},{"path":"https://jonasmoss.github.io/alphaci/reference/covmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform lambda and sigma to a covariance matrix. — covmat","text":"lambda Vector loadings. sigma Vector standard deviations.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/covmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform lambda and sigma to a covariance matrix. — covmat","text":"covariance matrix implied lambda sigma.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gamma_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma matrix — gamma_mat","title":"Gamma matrix — gamma_mat","text":"Calculate gamma matrix matrix observations.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gamma_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma matrix — gamma_mat","text":"","code":"gamma_mat(x, sigma, type = \"adf\")"},{"path":"https://jonasmoss.github.io/alphaci/reference/gamma_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma matrix — gamma_mat","text":"x numeric matrix observations. sigma Covariance matrix data. type One adf, normal elliptical.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gamma_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma matrix — gamma_mat","text":"sample estimate gamma matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gs.html","id":null,"dir":"Reference","previous_headings":"","what":"The gs vector used in the asymptotic variance of standardized alpha. — gs","title":"The gs vector used in the asymptotic variance of standardized alpha. — gs","text":"gs vector used asymptotic variance standardized alpha.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The gs vector used in the asymptotic variance of standardized alpha. — gs","text":"","code":"gs(phi)"},{"path":"https://jonasmoss.github.io/alphaci/reference/gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The gs vector used in the asymptotic variance of standardized alpha. — gs","text":"phi Correlation matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/gs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The gs vector used in the asymptotic variance of standardized alpha. — gs","text":"gs vector.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate unbiased sample kurtosis. — kurtosis","title":"Calculate unbiased sample kurtosis. — kurtosis","text":"Calculate unbiased sample kurtosis.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate unbiased sample kurtosis. — kurtosis","text":"","code":"kurtosis(x)"},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate unbiased sample kurtosis. — kurtosis","text":"x Matrix valus.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate unbiased sample kurtosis. — kurtosis","text":"Unbiased sample kurtosis.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate kurtosis correction — kurtosis_correction","title":"Calculate kurtosis correction — kurtosis_correction","text":"Calculate kurtosis correction","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate kurtosis correction — kurtosis_correction","text":"","code":"kurtosis_correction(x, type)"},{"path":"https://jonasmoss.github.io/alphaci/reference/kurtosis_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate kurtosis correction — kurtosis_correction","text":"x Matrix values type type correction, either \"normal\" \"elliptical\".","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate limits of a confidence interval. — limits","title":"Calculate limits of a confidence interval. — limits","text":"Calculate limits confidence interval.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate limits of a confidence interval. — limits","text":"","code":"limits(alternative, conf_level)"},{"path":"https://jonasmoss.github.io/alphaci/reference/limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate limits of a confidence interval. — limits","text":"alternative Alternative choosen. conf_level Confidence level.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/psi_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Psi matrix — psi_mat","title":"Psi matrix — psi_mat","text":"Calculate psi matrix matrix observations.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/psi_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Psi matrix — psi_mat","text":"","code":"psi_mat(x, sigma, type = \"adf\")"},{"path":"https://jonasmoss.github.io/alphaci/reference/psi_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Psi matrix — psi_mat","text":"x numeric matrix observations. sigma Covariance matrix. type One adf, normal elliptical.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/psi_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Psi matrix — psi_mat","text":"sample estimate psi matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/reliability.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability coefficients — reliability","title":"Reliability coefficients — reliability","text":"congeneric reliability standardized reliability; also bias b omega - alpha = b.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/reliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability coefficients — reliability","text":"","code":"alpha_bias(sigma, lambda, w = rep(1, length(lambda)))  omega(sigma, lambda)  omega_std(sigma, lambda)  alpha(sigma, lambda)  alpha_std(sigma, lambda)"},{"path":"https://jonasmoss.github.io/alphaci/reference/reliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliability coefficients — reliability","text":"sigma alpha alpha_std, either apositive definite covariance matrix vector standard deviations. vector standard deviations omega omega_std. lambda Vector loadings.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/reliability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reliability coefficients — reliability","text":"congeneric reliability standardized reliability, coefficient alpha, standardized, orsigma coefficient alpha.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/simulate_congeneric.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate observations from a congeneric one-factor model. — simulate_congeneric","title":"Simulate observations from a congeneric one-factor model. — simulate_congeneric","text":"Simulate observations one-factor model specified latent variable error variable distributions. error terms correlated, hence model congeneric.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/simulate_congeneric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate observations from a congeneric one-factor model. — simulate_congeneric","text":"","code":"simulate_congeneric(   n,   k,   sigma = 1,   lambda = 1,   latent = stats::rnorm,   error = stats::rnorm )"},{"path":"https://jonasmoss.github.io/alphaci/reference/simulate_congeneric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate observations from a congeneric one-factor model. — simulate_congeneric","text":"n Number observations. k Size matrix number testlets. sigma Vector error standard deviations. Repeated k elements. lambda Vector factor loadings. Repeated k elements. latent Distribution latent variable. error Distribution error variable.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/simulate_congeneric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate observations from a congeneric one-factor model. — simulate_congeneric","text":"Covariance matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/studentized_boots.html","id":null,"dir":"Reference","previous_headings":"","what":"Studentized bootstrap estimates using transformers. — studentized_boots","title":"Studentized bootstrap estimates using transformers. — studentized_boots","text":"Studentized bootstrap estimates using transformers.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/studentized_boots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Studentized bootstrap estimates using transformers. — studentized_boots","text":"","code":"studentized_boots(n_reps, x, type, parallel, transformer, standardized = FALSE)"},{"path":"https://jonasmoss.github.io/alphaci/reference/studentized_boots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Studentized bootstrap estimates using transformers. — studentized_boots","text":"n_reps Number bootstrap repetitions. x Data estimate alpha . type Type confidence interval. Either adf, elliptical, normal. parallel TRUE, makes calculations assumption parallel model. transformer transformer object. standardized TRUE, calculates standardized alpha. Calculates coefficient alpha otherwise.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/studentized_boots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Studentized bootstrap estimates using transformers. — studentized_boots","text":"Studentized bootstrap estimates.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/thurstone.html","id":null,"dir":"Reference","previous_headings":"","what":"Thurstone weights — thurstone","title":"Thurstone weights — thurstone","text":"Thurstone weights","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/thurstone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thurstone weights — thurstone","text":"","code":"thurstone(lambda, sigma)"},{"path":"https://jonasmoss.github.io/alphaci/reference/thurstone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thurstone weights — thurstone","text":"lambda Vector loadings. sigma Vector standard deviations.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/thurstone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thurstone weights — thurstone","text":"Thurstone weights.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/tr.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace of matrix — tr","title":"Trace of matrix — tr","text":"Trace matrix","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/tr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace of matrix — tr","text":"","code":"tr(mat)"},{"path":"https://jonasmoss.github.io/alphaci/reference/tr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace of matrix — tr","text":"mat square matrix.","code":""},{"path":"https://jonasmoss.github.io/alphaci/reference/tr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace of matrix — tr","text":"Trace matrix.","code":""}]
